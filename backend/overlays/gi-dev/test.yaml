apiVersion: v1
kind: Service
metadata:
  name: core-server
  namespace: core-storage-dev
spec:
  ports:
  - name: http2-api
    port: 9000
    protocol: TCP
    targetPort: 50051
  - name: http-stream
    port: 9001
    protocol: TCP
    targetPort: 9011
  selector:
    app.kubernetes.io/name: api
    app.kubernetes.io/part-of: core-server
    app.kubernetes.io/version: dev
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: api
    app.kubernetes.io/part-of: core-server
    app.kubernetes.io/version: dev
  name: core-server
  namespace: core-storage-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: api
      app.kubernetes.io/part-of: core-server
      app.kubernetes.io/version: dev
  template:
    metadata:
      labels:
        app.kubernetes.io/name: api
        app.kubernetes.io/part-of: core-server
        app.kubernetes.io/version: dev
    spec:
      containers:
      - command:
        - /CORE-Server
        env:
        - name: PSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: psql-pw
              name: postgres-user
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: accesskey
              name: s3
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: secretkey
              name: s3
        - name: STREAMINGSIGNSECRET
          valueFrom:
            secretKeyRef:
              key: signing-secret
              name: backend-secret
        image: harbor.computational.bio.uni-giessen.de/scienceobjectsdb/core-server:latest
        imagePullPolicy: Always
        name: core-server
        ports:
        - containerPort: 50051
        - containerPort: 9011
        resources:
          limits:
            cpu: 2000m
            memory: 2000Mi
          requests:
            cpu: 2000m
            memory: 2000Mi
        volumeMounts:
        - mountPath: /config
          name: config
          readOnly: true
      volumes:
      - configMap:
          name: corestorageconfig
        name: config
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
    nginx.ingress.kubernetes.io/server-snippet: |
      underscores_in_headers on;
      ignore_invalid_headers on;
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  name: core-server
  namespace: core-storage-dev
spec:
  rules:
  - host: api.core-server-dev.m1.k8s.computational.bio
    http:
      paths:
      - backend:
          service:
            name: core-server
            port:
              name: http2-api
        path: /
        pathType: Prefix
  tls:
  - hosts: api.core-server-dev.m1.k8s.computational.bio
    secretName: core-server-api-secret
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Grpc-Metadata-accesstoken,Grpc-Metadata-API_TOKEN
    nginx.ingress.kubernetes.io/cors-allow-origin: '*'
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/server-snippet: |
      underscores_in_headers on;
      ignore_invalid_headers on;
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  name: core-server-downloader
  namespace: core-storage-dev
spec:
  rules:
  - host: api.core-server-dev.m1.k8s.computational.bio
    http:
      paths:
      - backend:
          service:
            name: core-server
            port:
              name: http-stream
        path: /
        pathType: Prefix
  tls:
  - hosts: api.core-server-dev.m1.k8s.computational.bio
    secretName: core-server-download-secret
